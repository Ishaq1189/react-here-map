!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],t):t((e=e||self).reactHereMap={},e.React,e.PropTypes)}(this,(function(e,t,n){"use strict";var r="default"in t?t.default:t;function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(n,!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}n=n&&n.hasOwnProperty("default")?n.default:n;var d="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function b(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function y(e,t){return e(t={exports:{}},t.exports),t.exports}var h=y((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},t.isString=function(e){return"string"==typeof e},t.isFunction=function(e){return"function"==typeof e}}));b(h);h.isArray,h.isString,h.isFunction;var v=y((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n={};t.default=function e(t,r){if((0,h.isString)(t))return new Promise((function(e,r){!function(e,t,r){var o=function(){n[e]=!0,(0,h.isFunction)(t)&&t()};if(n[e])o();else{var i=document.createElement("script");i.type="text/javascript",i.readyState?i.onreadystatechange=function(){"loaded"!=i.readyState&&"complete"!=i.readyState||(i.onreadystatechange=null,o())}:i.onload=function(){o()},i.onerror=function(t){n[e]=!1,console.log("error",t),(0,h.isFunction)(r)&&r()},i.src=e,(document.body||document.head||document).appendChild(i)}}(t,(function(){return e(!0)}),(function(){return r()}))}));if((0,h.isArray)(t)){var o=Promise.resolve(!0);return t.forEach((function(t){o=o.then((function(){return e(t)}))})),o}throw new Error("Invalid argument for get()")}}));b(v);var m=v.default,g={VERSION:"v3/3.0",interactive:!1,includeUI:!1,includePlaces:!1},j=y((function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var a=o[0],u=o.length;(e||"object"!==i(a))&&(a={});for(var c=0;c<u;++c){var s=o[c];if("object"===i(s))for(var l in s)if("__proto__"!==l){var p=e?n.clone(s[l]):s[l];a[l]=t?r(a[l],p):p}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,a=i(e);if("array"===a)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&e.exports)}));const _=e=>{const t=(e=>j(g,e))(e||{}),{VERSION:n,version:r,interactive:o,includeUI:i,includePlaces:a}=t,u=r||n,c=((e=g.VERSION)=>[`https://js.api.here.com/${e}/mapsjs-service.js`,`https://js.api.here.com/${e}/mapsjs-ui.js`,`https://js.api.here.com/${e}/mapsjs-mapevents.js`,`https://js.api.here.com/${e}/mapsjs-places.js`])(u);return!o&&c.splice(2,1),!i&&c.splice(1,1),!a&&c.splice(3,1),m(`https://js.api.here.com/${u}/mapsjs-core.js`).then((function(){if(i){const e=document.createElement("link");e.setAttribute("rel","stylesheet"),e.setAttribute("type","text/css"),e.setAttribute("href",`https://js.api.here.com/${u}/mapsjs-ui.css`),document.getElementsByTagName("head")[0].append(e)}return m(c)})).catch(e=>{console.log(e)})};var w={normal:["xbase","xbasenight","base","basenight","map","mapnight","traffic","trafficnight","transit","panorama","panoramanight","labels","metaInfo"],satellite:["xbase","base","map","traffic","panorama","labels"],terrain:["xbase","base","map","traffic","panorama","labels"],incidents:!0,venues:!0},O=function(){},E={};["pointerdown","pointerup","pointermove","pointerenter","pointerleave","pointercancel","dragstart","drag","dragend","tab","dbltap"].map((function(e){return E[e]=O}));var P={VERSION:"v3/3.0",mapTypes:w,mapEvents:E,MAP_TYPE:"normal.map",mapOptions:{zoom:8,center:{lat:6.5243793,lng:3.3792057}},interactive:!1,includeUI:!1,includePlaces:!1,useEvents:!1,containerId:"HERE_MAP_CONTAINER",defaultClassName:"here-map-container"},S=y((function(e,t){var n=200,r="__lodash_hash_undefined__",o=800,i=16,a=9007199254740991,u="[object Arguments]",c="[object AsyncFunction]",s="[object Function]",l="[object GeneratorFunction]",p="[object Null]",f="[object Object]",b="[object Proxy]",y="[object Undefined]",h=/^\[object .+?Constructor\]$/,v=/^(?:0|[1-9]\d*)$/,m={};m["[object Float32Array]"]=m["[object Float64Array]"]=m["[object Int8Array]"]=m["[object Int16Array]"]=m["[object Int32Array]"]=m["[object Uint8Array]"]=m["[object Uint8ClampedArray]"]=m["[object Uint16Array]"]=m["[object Uint32Array]"]=!0,m[u]=m["[object Array]"]=m["[object ArrayBuffer]"]=m["[object Boolean]"]=m["[object DataView]"]=m["[object Date]"]=m["[object Error]"]=m[s]=m["[object Map]"]=m["[object Number]"]=m[f]=m["[object RegExp]"]=m["[object Set]"]=m["[object String]"]=m["[object WeakMap]"]=!1;var g="object"==typeof d&&d&&d.Object===Object&&d,j="object"==typeof self&&self&&self.Object===Object&&self,_=g||j||Function("return this")(),w=t&&!t.nodeType&&t,O=w&&e&&!e.nodeType&&e,E=O&&O.exports===w,P=E&&g.process,H=function(){try{return P&&P.binding&&P.binding("util")}catch(e){}}(),S=H&&H.isTypedArray;function M(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function A(e,t){return"__proto__"==t?void 0:e[t]}var T,z,B,I=Array.prototype,L=Function.prototype,V=Object.prototype,k=_["__core-js_shared__"],R=L.toString,x=V.hasOwnProperty,C=(T=/[^.]+$/.exec(k&&k.keys&&k.keys.IE_PROTO||""))?"Symbol(src)_1."+T:"",D=V.toString,U=R.call(Object),N=RegExp("^"+R.call(x).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),F=E?_.Buffer:void 0,$=_.Symbol,q=_.Uint8Array,G=F?F.allocUnsafe:void 0,Y=(z=Object.getPrototypeOf,B=Object,function(e){return z(B(e))}),J=Object.create,W=V.propertyIsEnumerable,K=I.splice,Q=$?$.toStringTag:void 0,X=function(){try{var e=Oe(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),Z=F?F.isBuffer:void 0,ee=Math.max,te=Date.now,ne=Oe(_,"Map"),re=Oe(Object,"create"),oe=function(){function e(){}return function(t){if(!Le(t))return{};if(J)return J(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function ie(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ae(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ue(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ce(e){var t=this.__data__=new ae(e);this.size=t.size}function se(e,t){var n=Ae(e),r=!n&&Me(e),o=!n&&!r&&ze(e),i=!n&&!r&&!o&&ke(e),a=n||r||o||i,u=a?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],c=u.length;for(var s in e)!t&&!x.call(e,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Ee(s,c))||u.push(s);return u}function le(e,t,n){(void 0===n||Se(e[t],n))&&(void 0!==n||t in e)||de(e,t,n)}function pe(e,t,n){var r=e[t];x.call(e,t)&&Se(r,n)&&(void 0!==n||t in e)||de(e,t,n)}function fe(e,t){for(var n=e.length;n--;)if(Se(e[n][0],t))return n;return-1}function de(e,t,n){"__proto__"==t&&X?X(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}ie.prototype.clear=function(){this.__data__=re?re(null):{},this.size=0},ie.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ie.prototype.get=function(e){var t=this.__data__;if(re){var n=t[e];return n===r?void 0:n}return x.call(t,e)?t[e]:void 0},ie.prototype.has=function(e){var t=this.__data__;return re?void 0!==t[e]:x.call(t,e)},ie.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=re&&void 0===t?r:t,this},ae.prototype.clear=function(){this.__data__=[],this.size=0},ae.prototype.delete=function(e){var t=this.__data__,n=fe(t,e);return!(n<0)&&(n==t.length-1?t.pop():K.call(t,n,1),--this.size,!0)},ae.prototype.get=function(e){var t=this.__data__,n=fe(t,e);return n<0?void 0:t[n][1]},ae.prototype.has=function(e){return fe(this.__data__,e)>-1},ae.prototype.set=function(e,t){var n=this.__data__,r=fe(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},ue.prototype.clear=function(){this.size=0,this.__data__={hash:new ie,map:new(ne||ae),string:new ie}},ue.prototype.delete=function(e){var t=we(this,e).delete(e);return this.size-=t?1:0,t},ue.prototype.get=function(e){return we(this,e).get(e)},ue.prototype.has=function(e){return we(this,e).has(e)},ue.prototype.set=function(e,t){var n=we(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},ce.prototype.clear=function(){this.__data__=new ae,this.size=0},ce.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},ce.prototype.get=function(e){return this.__data__.get(e)},ce.prototype.has=function(e){return this.__data__.has(e)},ce.prototype.set=function(e,t){var r=this.__data__;if(r instanceof ae){var o=r.__data__;if(!ne||o.length<n-1)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new ue(o)}return r.set(e,t),this.size=r.size,this};var be,ye=function(e,t,n){for(var r=-1,o=Object(e),i=n(e),a=i.length;a--;){var u=i[be?a:++r];if(!1===t(o[u],u,o))break}return e};function he(e){return null==e?void 0===e?y:p:Q&&Q in Object(e)?function(e){var t=x.call(e,Q),n=e[Q];try{e[Q]=void 0;var r=!0}catch(e){}var o=D.call(e);r&&(t?e[Q]=n:delete e[Q]);return o}(e):function(e){return D.call(e)}(e)}function ve(e){return Ve(e)&&he(e)==u}function me(e){return!(!Le(e)||function(e){return!!C&&C in e}(e))&&(Be(e)?N:h).test(function(e){if(null!=e){try{return R.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function ge(e){if(!Le(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=Pe(e),n=[];for(var r in e)("constructor"!=r||!t&&x.call(e,r))&&n.push(r);return n}function je(e,t,n,r,o){e!==t&&ye(t,(function(i,a){if(Le(i))o||(o=new ce),function(e,t,n,r,o,i,a){var u=A(e,n),c=A(t,n),s=a.get(c);if(s)return void le(e,n,s);var l=i?i(u,c,n+"",e,t,a):void 0,p=void 0===l;if(p){var d=Ae(c),b=!d&&ze(c),y=!d&&!b&&ke(c);l=c,d||b||y?Ae(u)?l=u:Ve(j=u)&&Te(j)?l=function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(u):b?(p=!1,l=function(e,t){if(t)return e.slice();var n=e.length,r=G?G(n):new e.constructor(n);return e.copy(r),r}(c,!0)):y?(p=!1,h=c,v=!0?(m=h.buffer,g=new m.constructor(m.byteLength),new q(g).set(new q(m)),g):h.buffer,l=new h.constructor(v,h.byteOffset,h.length)):l=[]:function(e){if(!Ve(e)||he(e)!=f)return!1;var t=Y(e);if(null===t)return!0;var n=x.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&R.call(n)==U}(c)||Me(c)?(l=u,Me(u)?l=function(e){return function(e,t,n,r){var o=!n;n||(n={});var i=-1,a=t.length;for(;++i<a;){var u=t[i],c=r?r(n[u],e[u],u,n,e):void 0;void 0===c&&(c=e[u]),o?de(n,u,c):pe(n,u,c)}return n}(e,Re(e))}(u):(!Le(u)||r&&Be(u))&&(l=function(e){return"function"!=typeof e.constructor||Pe(e)?{}:oe(Y(e))}(c))):p=!1}var h,v,m,g;var j;p&&(a.set(c,l),o(l,c,r,i,a),a.delete(c));le(e,n,l)}(e,t,a,n,je,r,o);else{var u=r?r(A(e,a),i,a+"",e,t,o):void 0;void 0===u&&(u=i),le(e,a,u)}}),Re)}function _e(e,t){return He(function(e,t,n){return t=ee(void 0===t?e.length-1:t,0),function(){for(var r=arguments,o=-1,i=ee(r.length-t,0),a=Array(i);++o<i;)a[o]=r[t+o];o=-1;for(var u=Array(t+1);++o<t;)u[o]=r[o];return u[t]=n(a),M(e,this,u)}}(e,t,De),e+"")}function we(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Oe(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return me(n)?n:void 0}function Ee(e,t){var n=typeof e;return!!(t=null==t?a:t)&&("number"==n||"symbol"!=n&&v.test(e))&&e>-1&&e%1==0&&e<t}function Pe(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||V)}var He=function(e){var t=0,n=0;return function(){var r=te(),a=i-(r-n);if(n=r,a>0){if(++t>=o)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(X?function(e,t){return X(e,"toString",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:De);function Se(e,t){return e===t||e!=e&&t!=t}var Me=ve(function(){return arguments}())?ve:function(e){return Ve(e)&&x.call(e,"callee")&&!W.call(e,"callee")},Ae=Array.isArray;function Te(e){return null!=e&&Ie(e.length)&&!Be(e)}var ze=Z||function(){return!1};function Be(e){if(!Le(e))return!1;var t=he(e);return t==s||t==l||t==c||t==b}function Ie(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=a}function Le(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ve(e){return null!=e&&"object"==typeof e}var ke=S?function(e){return function(t){return e(t)}}(S):function(e){return Ve(e)&&Ie(e.length)&&!!m[he(e)]};function Re(e){return Te(e)?se(e,!0):ge(e)}var xe,Ce=(xe=function(e,t,n){je(e,t,n)},_e((function(e,t){var n=-1,r=t.length,o=r>1?t[r-1]:void 0,i=r>2?t[2]:void 0;for(o=xe.length>3&&"function"==typeof o?(r--,o):void 0,i&&function(e,t,n){if(!Le(n))return!1;var r=typeof t;return!!("number"==r?Te(n)&&Ee(t,n.length):"string"==r&&t in n)&&Se(n[t],e)}(t[0],t[1],i)&&(o=r<3?void 0:o,r=1),e=Object(e);++n<r;){var a=t[n];a&&xe(e,a,n,o)}return e})));function De(e){return e}e.exports=Ce})),M=function(e){var t=function(e){return S(P,e)}(e||{}),n=t.VERSION,r=t.version,o=t.interactive,i=t.includeUI,a=t.includePlaces;return _({includeUI:i,includePlaces:a,interactive:o,version:r||n}).then((function(){return t}))},A=function(e){var t=e.app_id,n=e.app_code;if(!t||!n)throw new Error("Options must include appId and appCode");if("undefined"==typeof H||!H.service)throw new Error("Here Map JavaScripts is not loaded.");return new H.service.Platform(e)};var T=function(e){var t=typeof e;return null!==e&&("object"===t||"function"===t)};function z(e){for(var t=e.split("."),n=[],r=0;r<t.length;r++){for(var o=t[r];"\\"===o[o.length-1]&&void 0!==t[r+1];)o=o.slice(0,-1)+".",o+=t[++r];n.push(o)}return n}var B={get:function(e,t){if(!T(e)||"string"!=typeof t)return e;for(var n=z(t),r=0;r<n.length;r++){var o=Object.getOwnPropertyDescriptor(e,n[r])||Object.getOwnPropertyDescriptor(Object.prototype,n[r]);if(o&&!o.enumerable)return;if(null==(e=e[n[r]])){if(r!==n.length-1)return;break}}return e},set:function(e,t,n){if(T(e)&&"string"==typeof t)for(var r=z(t),o=0;o<r.length;o++){var i=r[o];T(e[i])||(e[i]={}),o===r.length-1&&(e[i]=n),e=e[i]}},delete:function(e,t){if(T(e)&&"string"==typeof t)for(var n=z(t),r=0;r<n.length;r++){var o=n[r];if(r===n.length-1)return void delete e[o];e=e[o]}},has:function(e,t){if(!T(e)||"string"!=typeof t)return!1;for(var n=z(t),r=0;r<n.length;r++)if(void 0===(e=e[n[r]]))return!1;return!0}},I=function(e,t){var n=t.split("."),r=e[n[0]];if(!(Array.isArray(r)&&r.includes(n[1]))&&!(!0===r))throw new Error("mapType Should be one from https://developer.here.com/documentation/maps/topics/map-types.html in dot notation")},L=function(e,t,n,r,o){I(r,o);var i=e.createDefaultLayers();return new H.Map(t,B.get(i,o),n)},V=function(e,t,n,r){var o=t?new H.mapevents.Behavior(new H.mapevents.MapEvents(e)):null;if(n&&t)for(var i in r)r.hasOwnProperty(i)&&function(){var t=r[i];e.addEventListener(i,(function(e){t()}))}();return o},k=function(e,t,n,r){if(!n)throw new Error("includeUI must be set to true to initialize default UI");return H.ui.UI.createDefault(t,e.createDefaultLayers(),r)},R=function(){var e=document.createElement("style"),t=".grab = {cursor: move;cursor: grab;cursor: -moz-grab;cursor: -webkit-grab;}.grabbing{cursor:grabbing;cursor:-moz-grabbing;cursor:-webkit-grabbing}";e.type="text/css",e.styleSheet?e.styleSheet.cssText=t:e.appendChild(document.createTextNode(t)),(document.head||document.getElementsByTagName("head")[0]).appendChild(e)},x=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=p(this,s(t).call(this,e))).container=r.createRef(),n.state={builder:{}},n}var n,a,u;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,e),n=t,(a=[{key:"componentDidMount",value:function(){var e=this.props,t=S({container:this.container.current,build:!0},e.options,e);delete t.options;var n=function(e,t){var n=t.useEvents,r=t.mapEvents,o=t.interactive,i=t.includeUI,a=t.mapType,u=t.MAP_TYPE,s=t.mapTypes,l=t.mapOptions,p=t.uiLang,f=t.container,d=t.build,b=a||u,y={options:c({},t,{MAP_TYPE:b}),platform:e};return f&&d?(y.map=L(e,f,l,s,b),y.interaction=V(y.map,o,n,r),i&&(y.ui=k(e,y.map,i,p)),R()):(y.createMap=L,y.createPlatform=initPlatform,y.createInteraction=V,y.createDefaultUI=k,y.createInteractionStyles=R),y}(e.platform,t);this.setState({builder:n})}},{key:"createLoadingComponent",value:function(){return r.createElement("div",null,"Loading")}},{key:"displayChildren",value:function(){var e=this.props.children,t=this.state.builder,n=t.map,o=t.platform,i=t.ui,a=t.options;return r.Children.map(e,(function(e){return r.cloneElement(e,{map:n,platform:o,ui:i,__options:a})}))}},{key:"render",value:function(){var e=this.props,t=e.style,n=e.loadingEl,i=this.state.builder.options,a=n||this.createLoadingComponent();return r.createElement("div",{id:P.containerId,className:P.defaultClassName,style:t,ref:this.container},"undefined"==typeof H&&!i&&a,"object"===("undefined"==typeof H?"undefined":o(H))&&i&&this.displayChildren())}}])&&i(n.prototype,a),u&&i(n,u),t}(r.Component);function C(e){var t=S({setViewBounds:!0},e),n=t.points,o=t.options,i=t.map,a=t.setViewBounds;t.platform,t.ui,t.__options;if(!H||!H.map||!i)throw new Error("HMap has to be initialized before adding Map Objects");if(!Array.isArray(n))throw new Error("points should be an array of objects containing lat and lng properties");var u=new H.geo.LineString;n.forEach((function(e){u.pushPoint(e)}));var c=new H.map.Polyline(u,o);return i.addObject(c),a&&i.setViewBounds(c.getBounds()),r.createElement("div",{style:{display:"none"}})}function D(e){var t=S({setViewBounds:!0},e),n=t.points,o=t.map,i=t.setViewBounds,a=t.options;t.platform,t.ui,t.__options;if(!H||!H.map||!o)throw new Error("HMap has to be initialized before adding Map Objects");if(!Array.isArray(n))throw new Error("points should be an array of number to use in drawing the points");var u={},c=n[0];"string"==typeof c&&2===c.split(",").length?(u=new H.geo.LineString,n.forEach((function(e){u.pushLatLngAlt.apply(u,e.split(","))}))):u=new H.geo.LineString(n,"values lat lng alt");var s=new H.map.Polygon(u,a);return o.addObject(s),i&&o.setViewBounds(s.getBounds()),r.createElement("div",{style:{display:"none"}})}function U(e){var t=S({setViewBounds:!0,updateMarker:!1,marker:null,getMarker:function(){}},e),n=t.icon,o=t.map,i=t.coords,a=t.type,u=t.options,c=t.setViewBounds,s=t.updateMarker,l=t.marker,p=t.getMarker,f=(t.platform,t.ui,t.__options,u);if(!H||!H.map||!o)throw new Error("HMap has to be initialized before adding Map Objects");if(!i.lat||!i.lng)throw new Error("coords should be an object having 'lat' and 'lng' as props");a&&"DOM"===a?f.icon=new H.map.DomIcon(n):a&&(f.icon=new H.map.Icon(n));var d=s&&l?l:new H.map.Marker(i,f);return o.getObjects().some((function(e){if("function"==typeof e.getPosition){var t=e.getPosition(),n=t.lat,r=t.lng;return n===i.lat&&i.lng===r}}))||s?s&&d.setPosition(i):o.addObject(d),!l&&p(d),c&&o.setCenter(i),r.createElement("div",{style:{display:"none"}})}function N(e){var t=S({setViewBounds:!0},e),n=t.radius,o=t.map,i=t.coords,a=t.options,u=t.setViewBounds;t.platform,t.ui,t.__options;if(!H||!H.map||!o)throw new Error("HMap has to be initialized before adding Map Objects");if(!i.lat||!i.lng)throw new Error("coords should be an object having 'lat' and 'lng' as props");n||console.info("radius is not set, default radius of 1000 is used");var c=new H.map.Circle(i,n||1e3,a);return o.addObject(c),u&&o.setCenter(i),r.createElement("div",{style:{display:"none"}})}function F(e){var t=S({setViewBounds:!0},e),n=t.map,o=t.points,i=t.options,a=t.setViewBounds;t.platform,t.ui,t.__options;if(!H||!H.map||!n)throw new Error("HMap has to be initialized before adding Map Objects");if(!o||4!==o.length)throw new Error("points should be an array of four items");var u=new H.geo.Rect(o[0],o[1],o[2],o[3]),c=new H.map.Rect(u,i);return n.addObject(c),a&&n.setViewBounds(c.getBounds()),r.createElement("div",{style:{display:"none"}})}function $(e){var n=e.geoCodeParams,o=e.platform,i=e.map,a=e.ui,u=e.children,c=e.reverse,s=e.landmark;if(!H||!H.map||!i)throw new Error("HMap has to be initialized before adding Map Objects");if(!n)throw new Error("geoCodeParams is not set");var l=f(t.useState([]),2),p=l[0],d=l[1],b=function(e){d(e.Response.View[0].Result)},y=o.getGeocodingService();return s?y.search(n,b,(function(e){alert(e)})):c?y.reverseGeocode(n,b,(function(e){return console.log(e)})):y.geocode(n,b,(function(e){return console.log(e)})),p.length&&p.map((function(e){var t=e.Location||e.Place.Locations[0],n=t.DisplayPosition.Latitude,c=t.DisplayPosition.Longitude,s={map:i,platform:o,ui:a,lat:n,lng:c,key:n,location:e,_location:t};return r.cloneElement(u,s)}))}function q(e){var n=S({renderDefaultLine:!0},e),o=n.routeParams,i=n.platform,a=n.map,u=n.ui,c=n.children,s=n.renderDefaultLine,l=n.isoLine,p=n.lineOptions,d=n.polygonOptions,b=n.markerOptions,y=n.icon;if(!H||!H.map||!a)throw new Error("HMap has to be initialized before adding Map Objects");if(!o)throw new Error("routeParams is not set");var h,v=f(t.useState([]),2),m=v[0],g=(v[1],f(t.useState({}),2)),j=g[0],_=(g[1],f(t.useState({}),2)),w=_[0],O=(_[1],f(t.useState({}),2)),E=(O[0],O[1],f(t.useState({}),2)),P=E[0],M=(E[1],i.getRoutingService(),function(){return l?r.createElement(r.Fragment,null,r.createElement(D,{points:m,options:d,setViewBounds:!0,map:a,platform:i}),r.createElement(U,{coords:P,map:a,platform:i,icon:y,options:b,setViewBounds:!1})):(e=j.waypoint[0].mappedPosition,t=j.waypoint[1].mappedPosition,n={lat:e.latitude,lng:e.longitude},o={lat:t.latitude,lng:t.longitude},r.createElement(r.Fragment,null,r.createElement(C,{points:m,map:a,options:p,setViewBounds:!0}),r.createElement(U,{coords:n,map:a,platform:i,icon:y,options:b,setViewBounds:!1}),r.createElement(U,{coords:o,map:a,platform:i,icon:y,options:b,setViewBounds:!1})));var e,t,n,o});return(j.waypoint||w.shape)&&m.length?s?M():(h={map:a,platform:i,ui:u,route:j,routeShape:m,center:P,component:w},r.cloneElement(c,h)):null}function G(e){var t=e.platform,n=e.map,r=e.mapLayerType,o=e.__options.mapTypes;if(!H||!H.map||!n)throw new Error("HMap has to be initialized before adding Map Objects");I(o,r);var i=t.createDefaultLayers();return n.addLayer(B.get(i,r)),null}x.propTypes={version:n.string,mapType:n.string,useEvents:n.bool,interactive:n.bool,includeUI:n.bool,mapEvents:n.object,platform:n.object,options:n.object,mapOptions:n.object},C.propTypes={points:n.array.isRequired,options:n.object,map:n.object,setViewBounds:n.bool},D.propTypes={points:n.array.isRequired,options:n.object,map:n.object,setViewBounds:n.bool},U.propTypes={coords:n.object.isRequired,icon:n.any,options:n.object,type:n.string,setViewBounds:n.bool,map:n.object},N.propTypes={coords:n.object.isRequired,options:n.object,radius:n.number,setViewBounds:n.bool,map:n.object},F.propTypes={options:n.object,points:n.array.isRequired,map:n.object},$.propTypes={geoCodeParams:n.object,children:n.element.isRequired,reverse:n.bool,landmark:n.bool,map:n.object,platform:n.object,ui:n.object},q.propTypes={routeParams:n.object,lineOptions:n.object,markerOptions:n.object,children:n.element,renderDefaultLine:n.bool,isoLine:n.bool,icon:n.any,map:n.object,platform:n.object,ui:n.object},G.propTypes={platform:n.object,__options:n.object,mapLayerType:n.string.isRequired,map:n.object};var Y=C,J=D,W=U,K=N,Q=F,X=q,Z=G,ee=$,te=x;e.HMap=te,e.HMapCircle=K,e.HMapGeoCode=ee,e.HMapLayer=Z,e.HMapMarker=W,e.HMapPolyLine=Y,e.HMapPolygon=J,e.HMapRectangle=Q,e.HMapRoute=X,e.default=function(e){var n=f(t.useState({platform:{},options:{}}),2),o=n[0],i=n[1];t.useEffect((function(){M(e).then((function(e){var t=A(e);i({platform:t,options:e})}))}),[o.platform.A]);var a=o.platform,u=o.options;return"api.here.com"==a.A&&u.app_code?r.Children.map(e.children,(function(e){return r.cloneElement(e,{platform:a,options:u})})):null},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
